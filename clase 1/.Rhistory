funcion_ejercicio_1 <- function(matriz) {
# Obtengo las dimensiones
print(dim(matriz))
# Chequeo si el primer elemento es par
primer_elem <- matriz[1,1]
if (primer_elem %% 2 == 0) {
print('El primer elemento es par')
}
else{print('El primer elemento no es par')}
}
# 1) Crear un dataframe con el dataset de R: state.x77
df <- state.x77
#2)a) ¿Cuál es la población total de Estados Unidos?
apply(X=df, MARGIN =2 , FUN=sum)
#2)a) ¿Cuál es la población total de Estados Unidos?
apply(X=df, MARGIN =3 , FUN=sum)
#2)a) ¿Cuál es la población total de Estados Unidos?
apply(X=df, MARGIN =2 , FUN=sum)
help(apply)
#b) ¿Cuál es la media de la expectativa de vida?
apply(X=df, MARGIN =2 , FUN=mean)
#c) ¿Cual es la mediana del ingreso en pesos argentinos?
apply(X=df, MARGIN =2 , FUN=function(x) median(x)*59)
# 3) Crear el dataset con las dos columnas
df_indice <- df[,c(3, 5)]
head(df_indice)
head(df)
# Crear el indice
ilit_murd <- apply(X=df_indice, MARGIN =1 , FUN=sum)
head(ilit_murd)
#Para buscar los máximos y mínimos armo una máscara booleana
ilit_murd[ilit_murd==max(ilit_murd)]
ilit_murd[ilit_murd==min(ilit_murd)]
rm(list=ls())
# - Crear un OBJETO llamado _OBJETO_ definido como el resultado de la suma: 5 + 6
OBJETO <- 5+6
# - Crear un VECTOR _VEC0_ que contenga los numeros 1, 3, 4.
VEC0 <- c(1,3,4)
# - Crear 3 vectores ( _VEC1_, _VEC2_, _VEC3_) que sean transformaciones del anterior.
VEC1 <- VEC0*2
VEC2 <- VEC0^2
VEC3 <- VEC0-2
rm(list=ls())
# - Crear un OBJETO llamado _OBJETO_ definido como el resultado de la suma: 5 + 6
OBJETO <- 5+6
# - Crear un VECTOR _VEC0_ que contenga los numeros 1, 3, 4.
VEC0 <- c(1,3,4)
# - Crear 3 vectores ( _VEC1_, _VEC2_, _VEC3_) que sean transformaciones del anterior.
VEC1 <- VEC0*2
VEC2 <- VEC0^2
VEC3 <- VEC0-2
# - Crear 3 vectores con la misma cantidad de elementos que VEC0, pero con variables string (texto) ( _VEC4_, _VEC5_, _VEC6_),
VEC4 <- c("NO","NO","SI")
VEC5 <- c("PAGO","PAGO","LIBRE")
VEC6 <- c("SAS","SPSS","R")
# - Crear un dataframe _DFRAME_ como combinación de todos los vectores creados previamente
DFRAME <- data.frame(VEC0,VEC1,VEC2,VEC3,VEC4,VEC5,VEC6)
# - Crear una lista _LA_LISTA_ con el Objeto creado, Un vector cualquiera y el DATAFRAME
LALISTA <- list(OBJETO,VEC0,DFRAME)
# - Para todos los valores del vector _Vec0_, imprimir mediante un loop el triple de dichos valores
for(i in VEC0){
print(i*3)
}
# - Mediante un loop que itere sobre la variable VEC6 del dataframe _DFRAME_,
## imprimir un texto que combine el Valor de VEC6 y de VEC 0
for(i in unique(DFRAME$VEC6)){
A <- paste(DFRAME$VEC6[VEC6==i],DFRAME$VEC0[VEC6==i])
print(A)
}
for (i in length(VEC6)){
print(VEC6[i])
}
for (i in length(VEC6)){
print(i)
}
for (i in length(VEC6)){
print(VEC6(i))
}
for (i in length(VEC6)){
print(VEC6[VEC6==i])
}
for (i in length(VEC6)){
print(VEC6[i])
}
for (i in length(VEC6)){
print(i)
}
for (i in c(1:length(VEC6))){
print(VEC6[i])
}
for (i in c(1:length(VEC6))){
a <- paste(VEC6[i], VEC0[i])
}
for (i in c(1:length(VEC6))){
a <- paste(VEC6[i], VEC0[i])
print(a)
}
VEC1
VEC0
for (i in c(1:length(VEC0))){
if (VEC0[i] > 2){
VEC1[i] <- VEC1[i]
}
VEC1
}
VEC1
DFRAME$VEC1 <- ifelse(DFRAME$VEC0>2,DFRAME$VEC0*2,DFRAME$VEC0)
DFRAME
for (i in c(1:length(VEC0))){
if (VEC0[i] > 2){
VEC1[i] <- VEC1[i]*2
}
}
VEC1
# - Crear un VECTOR _VEC0_ que contenga los numeros 1, 3, 4.
VEC0 <- c(1,3,4)
# - Crear 3 vectores ( _VEC1_, _VEC2_, _VEC3_) que sean transformaciones del anterior.
VEC1 <- VEC0*2
for (i in c(1:length(VEC0))){
if (VEC0[i] > 2){
VEC1[i] <- VEC0[i]*2
}
}
VEC1
DFRAME$VEC1 <- ifelse(DFRAME$VEC0>2,DFRAME$VEC0*2,DFRAME$VEC0)
DFRAME
for (i in c(1:length(VEC0))){
if (VEC0[i] > 2){
VEC1[i] <- VEC0[i]*2
} else {
VEC1[i] <- VEC0[i]
}
}
VEC1
DFRAME$VEC1 <- ifelse(DFRAME$VEC0>2,DFRAME$VEC0*2,DFRAME$VEC0)
DFRAME
individual_t117 <- read.table("../Fuentes/usu_individual_t117.txt",
sep=";",
dec=",",
header = TRUE,
fill = TRUE)
# - Guardar la base como un archivo de extensión .RDS
saveRDS(individual_t117,"../Fuentes/individual_t117.RDS")
# - Volver a levantar la base, pero como .RDS y asignarla conel nombre _BaseRDS_ ¿tarda más o menos?
BaseRDS <- readRDS("../Fuentes/individual_t117.RDS")
# - Levantar del Excel llamado CANASTAS que se encuentra en la carpeta de Fuentes, la hoja "CBT".
## y Definirla como Hoja_CBT. Pueden usar la función _read.xlsx_ de la librería __xlsx__
## o la función read_excel de la libreria __readxl__
library(xlsx)
library(readxl)
Hoja_CBT_1 <- read.xlsx(file = "../Fuentes/CANASTAS.xls",sheetName = "CBT")
# - Levantar del Excel llamado CANASTAS que se encuentra en la carpeta de Fuentes, la hoja "CBT".
## y Definirla como Hoja_CBT. Pueden usar la función _read.xlsx_ de la librería __xlsx__
## o la función read_excel de la libreria __readxl__
library(xlsx)
library(readxl)
install.packages(xlsx)
Hoja_CBT_1 <- read.xlsx(file = "../Fuentes/CANASTAS.xls",sheetName = "CBT")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
# - Levantar del Excel llamado CANASTAS que se encuentra en la carpeta de Fuentes, la hoja "CBT".
## y Definirla como Hoja_CBT. Pueden usar la función _read.xlsx_ de la librería __xlsx__
## o la función read_excel de la libreria __readxl__
library(xlsx)
library(readxl)
Hoja_CBT_1 <- read.xlsx(file = "../Fuentes/CANASTAS.xls",sheetName = "CBT")
class(Hoja_CBT_1)
Hoja_CBT_2 <- read_excel(path = "../Fuentes/CANASTAS.xls",sheet = "CBT")
class(Hoja_CBT_2)
# - Levantar el mismo Excel, utilizando un Objeto que contenga el directorio del arhico a levantar.
##  chequear con ```dir.exist()``` que lo creamos bien (¿no funcionó? pista: /\\)
##  Levantar el mismo excel utilizando los nombres de directorio como objetos.
Hoja_CBT_2
# - Levantar el mismo Excel, utilizando un Objeto que contenga el directorio del arhico a levantar.
##  chequear con ```dir.exist()``` que lo creamos bien (¿no funcionó? pista: /\\)
##  Levantar el mismo excel utilizando los nombres de directorio como objetos.
Hoja_CBT_1
fuentes.dir <- "../Fuentes/"
dir.exists(fuentes.dir)
Hoja_CBT <- read.xlsx(file = paste0(fuentes.dir,"CANASTAS.xls"),sheetName = "CBT",
encoding = "UTF-8")
individual_t416 <- read.table("Fuentes/usu_individual_t416.txt",
sep=";", dec=",", header = TRUE, fill = TRUE)
individual_t416 <- read.table("Fuentes/usu_individual_t416.txt",
sep=";", dec=",", header = TRUE, fill = TRUE)
individual_t416 <- read.table("../Fuentes/usu_individual_t416.txt",
sep=";", dec=",", header = TRUE, fill = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
