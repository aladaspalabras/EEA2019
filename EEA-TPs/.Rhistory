filter(term %in% c('accuracy', 'sensitivity', 'specificity', 'precision','recall'))
confusionMatrix(table(table$predicted_class, table$Survived), positive = "1") %>%
tidy() %>%
select(term, estimate) %>%
filter(term %in% c('accuracy', 'sensitivity', 'specificity', 'precision','recall')) %>%
mutate(cutoff=cutoffs)
install.packages("pROC")
library("tidyverse")
library("data.table")
library("ggplot2")
library("GGally")
library("modelr")
library("gridExtra")
library("caret")
library("broom")
library("pROC")
dataset <- fread("titanic_complete_train.csv")
dataset
glimpse(dataset)
dataset.filtrado <- dataset %>%
select(PassengerId, Survived, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked)
dataset.filtrado
dataset.preproc <- dataset.filtrado %>%
mutate(Survived = as_factor(Survived),
Pclass = as_factor(Pclass),
Embarked = as_factor(Embarked))
dataset.preproc
glimpse(dataset.preproc)
variables <- c('Survived','Pclass','Sex','Age','Fare')
ggpairs(dataset.preproc[variables],
mapping = aes(colour= Survived)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Supervivencia - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
# porcentaje de sobrevivientes
round((342 / nrow(dataset.preproc)) * 100,0)
train_valid <- dataset.preproc %>% resample_partition(c(train=0.7,valid=0.3))
trainsetM <- train_valid$train %>% as_tibble()
validationsetM <- train_valid$valid %>% as_tibble()
trainplotM <- ggplot(trainsetM,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Conjunto de entrenamiento",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
validplotM <- ggplot(validationsetM,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 24)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplotM,
validplotM,
nrow = 1,
top = "Supervivencia - Distribución de clases - modelr"
)
# porcentaje de sobrevivientes en set de entrenamiento
round((249 / nrow(trainsetM)) * 100,0)
# porcentaje de sobrevivientes en set de validación
round((93 / nrow(validationsetM)) * 100,0)
trainIndex <- createDataPartition(dataset.preproc$Survived, p = .7,
list = FALSE,
times = 1)
trainsetC <- dataset.preproc[ trainIndex,]
validationsetC  <- dataset.preproc[-trainIndex,]
trainplotC <- ggplot(trainsetC,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Conjunto de entrenamiento",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
validplotC <- ggplot(validationsetC,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 22)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplotC,
validplotC,
nrow = 1,
top = "Supervivencia - Distribución de clases - caret"
)
# porcentaje de sobrevivientes en set de entrenamiento
round((240 / nrow(trainsetC)) * 100,0)
# porcentaje de sobrevivientes en set de validación
round((102 / nrow(validationsetC)) * 100,0)
glm.fit <- glm(Survived ~ Pclass + Sex + Age, data = trainsetC, family = "binomial")
summary(glm.fit)
rose <- data.frame(Pclass = as.factor(1),
Sex = "female",
Age = 17)
rose.prob <- predict(object = glm.fit, newdata = rose, type = "response")
round(rose.prob,3)
jack <- data.frame(Pclass = as.factor(3),
Sex = "male",
Age = 20)
jack.prob <- predict(object = glm.fit, newdata = jack, type = "response")
round(jack.prob,3)
logit_formulae <- formulas(.response = ~Survived,
model0 = ~ Pclass + Sex + Age,
model1 = ~ Pclass + Sex,
model2 = ~ Pclass + Embarked + Sex + Age,
model3 = ~ Embarked + Sex
)
models <- data_frame(logit_formulae) %>%
mutate(models = names(logit_formulae),
expression = paste(logit_formulae),
mod = map(logit_formulae, ~glm(.,family = 'binomial', data = trainsetC)))
models
models %>%
filter(grepl('1|2|3', models)) %>%
mutate(tidy = map(mod,tidy)) %>%
unnest(tidy, .drop = TRUE) %>%
mutate(estimate=round(estimate,5),
p.value=round(p.value,4))
models <- models %>%
mutate(glance = map(mod,glance))
models %>%
unnest(glance, .drop = TRUE) %>%
mutate(perc_explained_dev = 1-(deviance/null.deviance)) %>%
select(-c(models, df.null, AIC, BIC)) %>%
arrange(deviance)
models <- models %>%
mutate(pred= map(mod,augment, type.predict = "response"))
prediction <- models %>%
filter(grepl('2', models)) %>%
unnest(pred, .drop=TRUE)
roc_data <- roc(response=prediction$Survived, predictor=prediction$.fitted)
ggroc(roc_data, size=1, color="turquoise3") +
geom_abline(slope = 1, intercept = 1, linetype='dashed') +
theme_bw() +
labs(title='Curva ROC',
subtitle = 'Modelo2: Survived ~ Pclass + Embarked + Sex + Age')
print(paste('AUC: Modelo2: Survived~Pclass+Embarked+Sex+Age:', roc_data$auc))
ggplot(prediction, aes(x=Survived, y=.fitted, group=Survived,fill=factor(Survived))) +
geom_violin() +
theme_bw() +
guides(fill=FALSE) +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
labs(title='Violin plot',
subtitle = 'Modelo2: Survived ~ Pclass + Embarked + Sex + Age',
y='Probabilidad predicha')
valid <- models %>%
filter(grepl('2',models)) %>%
mutate(val= map(mod,augment, newdata=validationsetC, type.predict = "response")) %>%
unnest(val, .drop=TRUE)
valid
prediction_metrics <- function(cutoff, predictions=valid){
table <- predictions %>%
mutate(predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),
Survived= factor(Survived))
confusionMatrix(table(table$predicted_class, table$Survived), positive = "1") %>%
tidy() %>%
select(term, estimate) %>%
filter(term %in% c('accuracy', 'sensitivity', 'specificity', 'precision','recall')) %>%
mutate(cutoff=cutoff)
}
cutoffs = seq(0.05,0.95,0.01)
logit_pred= map_dfr(cutoffs, prediction_metrics) %>% mutate(term=as.factor(term))
qgplot(logit_pred, aes(cutoff,estimate, group=term, color=term)) + geom_line(size=1) +
theme_bw() +
labs(title= 'Accuracy, Sensitivity, Specificity, Recall y Precision', subtitle= 'Modelo completo', color="")
ggplot(logit_pred, aes(cutoff,estimate, group=term, color=term)) + geom_line(size=1) +
theme_bw() +
labs(title= 'Accuracy, Sensitivity, Specificity, Recall y Precision', subtitle= 'Modelo completo', color="")
logit_pred= map_dfr(cutoffs, prediction_metrics) %>% mutate(term=as.factor(term))
logit_pred= map_dfr(cutoffs, prediction_metrics) %>% mutate(term=as.factor(term))
ggplot(logit_pred, aes(cutoff,estimate, group=term, color=term)) + geom_line(size=1) +
theme_bw() +
labs(title= 'Accuracy, Sensitivity, Specificity, Recall y Precision', subtitle= 'Model2 - Sobre conjunto de validación', color="")
valid.results <-  valid %>%
unnest(val, .drop=TRUE)
valid <- models %>%
filter(grepl('2',models)) %>%
mutate(val= map(mod,augment, newdata=validationsetC, type.predict = "response"))
valid.results <-  valid %>%
unnest(val, .drop=TRUE)
valid
valid.results
prediction_metrics <- function(cutoff, predictions=valid.results){
table <- predictions %>%
mutate(predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),
Survived= factor(Survived))
confusionMatrix(table(table$predicted_class, table$Survived), positive = "1") %>%
tidy() %>%
select(term, estimate) %>%
filter(term %in% c('accuracy', 'sensitivity', 'specificity', 'precision','recall')) %>%
mutate(cutoff=cutoff)
}
cutoffs = seq(0.05,0.95,0.01)
logit_pred= map_dfr(cutoffs, prediction_metrics) %>% mutate(term=as.factor(term))
logit_pred= map_dfr(cutoffs, prediction_metrics) %>% mutate(term=as.factor(term))
ggplot(logit_pred, aes(cutoff,estimate, group=term, color=term)) + geom_line(size=1) +
theme_bw() +
labs(title= 'Accuracy, Sensitivity, Specificity, Recall y Precision', subtitle= 'Model2 - Sobre conjunto de validación', color="")
# Clasificamos utilizamos el punto de corte
table = valid$val %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Supervised = factor(Supervised))
valid$val
# Clasificamos utilizamos el punto de corte
table = valid %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Supervised = factor(Supervised))
# Clasificamos utilizamos el punto de corte
table = valid %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Supervised = factor(Supervised))
# Clasificamos utilizamos el punto de corte
table = valid %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Supervised = factor(Supervised))
# Clasificamos utilizamos el punto de corte
valid %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Supervised = factor(Supervised))
valid
valid$mod
# Agregamos la predicciones al dataset de testeo
table= augment(x=valid$mod, newdata=validationsetC, type.predict='response')
valid$mod
valid$mod[[1]]
valid$val[[1]] %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Supervised = factor(Supervised))
valid[[1]] %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Supervised = factor(Supervised))
valid.results[[1]] %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Supervised = factor(Supervised))
valid
valid.results
valid.results %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Supervised = factor(Supervised))
valid.results
valid <- models %>%
filter(grepl('2',models)) %>%
mutate(val= map(mod,augment, newdata=validationsetC, type.predict = "response"))
valid
valid.results <-  valid %>%
unnest(val, .drop=TRUE)
valid.results
valid.results %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Supervised = factor(Supervised))
valid.results %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Survived = factor(Survived))
table <- valid.results %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Survived = factor(Survived))
# Creamos la matriz de confusión
confusionMatrix(table(table$default, table$predicted_class), positive = "1")
# Creamos la matriz de confusión
confusionMatrix(table(table$Survived, table$predicted_class), positive = "1")
library("tidyverse")
library("data.table")
library("ggplot2")
library("GGally")
library("modelr")
library("gridExtra")
library("caret")
library("broom")
library("pROC")
dataset <- fread("titanic_complete_train.csv")
dataset
glimpse(dataset)
dataset.filtrado <- dataset %>%
select(PassengerId, Survived, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked)
dataset.filtrado
dataset.preproc <- dataset.filtrado %>%
mutate(Survived = as_factor(Survived),
Pclass = as_factor(Pclass),
Embarked = as_factor(Embarked))
dataset.preproc
glimpse(dataset.preproc)
variables <- c('Survived','Pclass','Sex','Age','Fare')
ggpairs(dataset.preproc[variables],
mapping = aes(colour= Survived)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Supervivencia - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
# porcentaje de sobrevivientes
round((342 / nrow(dataset.preproc)) * 100,0)
train_valid <- dataset.preproc %>% resample_partition(c(train=0.7,valid=0.3))
trainsetM <- train_valid$train %>% as_tibble()
validationsetM <- train_valid$valid %>% as_tibble()
trainplotM <- ggplot(trainsetM,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Conjunto de entrenamiento",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
validplotM <- ggplot(validationsetM,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 24)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplotM,
validplotM,
nrow = 1,
top = "Supervivencia - Distribución de clases - modelr"
)
# porcentaje de sobrevivientes en set de entrenamiento
round((249 / nrow(trainsetM)) * 100,0)
# porcentaje de sobrevivientes en set de validación
round((93 / nrow(validationsetM)) * 100,0)
trainIndex <- createDataPartition(dataset.preproc$Survived, p = .7,
list = FALSE,
times = 1)
trainsetC <- dataset.preproc[ trainIndex,]
validationsetC  <- dataset.preproc[-trainIndex,]
trainplotC <- ggplot(trainsetC,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Conjunto de entrenamiento",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
validplotC <- ggplot(validationsetC,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 22)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplotC,
validplotC,
nrow = 1,
top = "Supervivencia - Distribución de clases - caret"
)
# porcentaje de sobrevivientes en set de entrenamiento
round((240 / nrow(trainsetC)) * 100,0)
# porcentaje de sobrevivientes en set de validación
round((102 / nrow(validationsetC)) * 100,0)
glm.fit <- glm(Survived ~ Pclass + Sex + Age, data = trainsetC, family = "binomial")
summary(glm.fit)
rose <- data.frame(Pclass = as.factor(1),
Sex = "female",
Age = 17)
rose.prob <- predict(object = glm.fit, newdata = rose, type = "response")
round(rose.prob,3)
jack <- data.frame(Pclass = as.factor(3),
Sex = "male",
Age = 20)
jack.prob <- predict(object = glm.fit, newdata = jack, type = "response")
round(jack.prob,3)
logit_formulae <- formulas(.response = ~Survived,
model0 = ~ Pclass + Sex + Age,
model1 = ~ Pclass + Sex,
model2 = ~ Pclass + Embarked + Sex + Age,
model3 = ~ Embarked + Sex
)
models <- data_frame(logit_formulae) %>%
mutate(models = names(logit_formulae),
expression = paste(logit_formulae),
mod = map(logit_formulae, ~glm(.,family = 'binomial', data = trainsetC)))
models
models %>%
filter(grepl('1|2|3', models)) %>%
mutate(tidy = map(mod,tidy)) %>%
unnest(tidy, .drop = TRUE) %>%
mutate(estimate=round(estimate,5),
p.value=round(p.value,4))
models <- models %>%
mutate(glance = map(mod,glance))
models %>%
unnest(glance, .drop = TRUE) %>%
mutate(perc_explained_dev = 1-(deviance/null.deviance)) %>%
select(-c(models, df.null, AIC, BIC)) %>%
arrange(deviance)
models <- models %>%
mutate(pred= map(mod,augment, type.predict = "response"))
prediction <- models %>%
filter(grepl('2', models)) %>%
unnest(pred, .drop=TRUE)
roc_data <- roc(response=prediction$Survived, predictor=prediction$.fitted)
ggroc(roc_data, size=1, color="turquoise3") +
geom_abline(slope = 1, intercept = 1, linetype='dashed') +
theme_bw() +
labs(title='Curva ROC',
subtitle = 'Modelo2: Survived ~ Pclass + Embarked + Sex + Age')
print(paste('AUC: Modelo2: Survived~Pclass+Embarked+Sex+Age:', roc_data$auc))
ggplot(prediction, aes(x=Survived, y=.fitted, group=Survived,fill=factor(Survived))) +
geom_violin() +
theme_bw() +
guides(fill=FALSE) +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
labs(title='Violin plot',
subtitle = 'Modelo2: Survived ~ Pclass + Embarked + Sex + Age',
y='Probabilidad predicha')
valid <- models %>%
filter(grepl('2',models)) %>%
mutate(val= map(mod,augment, newdata=validationsetC, type.predict = "response"))
valid.results <-  valid %>%
unnest(val, .drop=TRUE)
valid.results
prediction_metrics <- function(cutoff, predictions=valid.results){
table <- predictions %>%
mutate(predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),
Survived= factor(Survived))
confusionMatrix(table(table$predicted_class, table$Survived), positive = "1") %>%
tidy() %>%
select(term, estimate) %>%
filter(term %in% c('accuracy', 'sensitivity', 'specificity', 'precision','recall')) %>%
mutate(cutoff=cutoff)
}
cutoffs = seq(0.05,0.95,0.01)
logit_pred= map_dfr(cutoffs, prediction_metrics) %>% mutate(term=as.factor(term))
ggplot(logit_pred, aes(cutoff,estimate, group=term, color=term)) + geom_line(size=1) +
theme_bw() +
labs(title= 'Accuracy, Sensitivity, Specificity, Recall y Precision', subtitle= 'Model2 - Sobre conjunto de validación', color="")
sel_cutoff = 0.4
sel_cutoff = 0.4
table <- valid.results %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Survived = factor(Survived))
# Creamos la matriz de confusión
confusionMatrix(table(table$Survived, table$predicted_class), positive = "1")
sel_cutoff = 0.38
table <- valid.results %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Survived = factor(Survived))
# Creamos la matriz de confusión
confusionMatrix(table(table$Survived, table$predicted_class), positive = "1")
sel_cutoff = 0.20
table <- valid.results %>%
mutate(predicted_class=if_else(.fitted>0.25, 1, 0) %>% as.factor(),
Survived = factor(Survived))
# Creamos la matriz de confusión
confusionMatrix(table(table$Survived, table$predicted_class), positive = "1")
table <- valid.results %>%
mutate(predicted_class=if_else(.fitted>sel_cutoff, 1, 0) %>% as.factor(),
Survived = factor(Survived))
# Creamos la matriz de confusión
confusionMatrix(table(table$Survived, table$predicted_class), positive = "1")
sel_cutoff = 0.40
table <- valid.results %>%
mutate(predicted_class=if_else(.fitted>sel_cutoff, 1, 0) %>% as.factor(),
Survived = factor(Survived))
# Creamos la matriz de confusión
confusionMatrix(table(table$Survived, table$predicted_class), positive = "1")
sel_cutoff = 0.38
table <- valid.results %>%
mutate(predicted_class=if_else(.fitted>sel_cutoff, 1, 0) %>% as.factor(),
Survived = factor(Survived))
# Creamos la matriz de confusión
confusionMatrix(table(table$Survived, table$predicted_class), positive = "1")
sel_cutoff = 0.40
table <- valid.results %>%
mutate(predicted_class=if_else(.fitted>sel_cutoff, 1, 0) %>% as.factor(),
Survived = factor(Survived))
# Creamos la matriz de confusión
confusionMatrix(table(table$Survived, table$predicted_class), positive = "1")
sel_cutoff = 0.45
table <- valid.results %>%
mutate(predicted_class=if_else(.fitted>sel_cutoff, 1, 0) %>% as.factor(),
Survived = factor(Survived))
# Creamos la matriz de confusión
confusionMatrix(table(table$Survived, table$predicted_class), positive = "1")
sel_cutoff = 0.40
sel_cutoff = 0.40
table <- valid.results %>%
mutate(predicted_class=if_else(.fitted>sel_cutoff, 1, 0) %>% as.factor(),
Survived = factor(Survived))
# Creamos la matriz de confusión
confusionMatrix(table(table$Survived, table$predicted_class), positive = "1")
