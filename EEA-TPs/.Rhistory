labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(supervivencia,
aes(x=Survived, y = n, fill=Survived)) +
geom_col() +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1)
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 0.5)) +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = -1)) +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 1)) +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 10)) +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 100)) +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = -100)) +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 100)) +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust = 1.6) +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Sobrevivientes - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
train_valid <- dataset.preproc %>% resample_partition(c(train=0.7,test=0.3))
library("modelr")
train_valid <- dataset.preproc %>% resample_partition(c(train=0.7,test=0.3))
train_valid
train_valid <- dataset.preproc %>% resample_partition(c(train=0.7,valid=0.3))
train_valid
trainset <- train_valid$train %>% as_tibble()
validationset <- train_valid$valid %>% as_tibble()
trainset
nrow(dataset.preproc)
549 / nrow(dataset.preproc)
(549 / nrow(dataset.preproc)) * 100
roun((549 / nrow(dataset.preproc)) * 100,0)
round((549 / nrow(dataset.preproc)) * 100,0)
# porcentaje de sobrevivientes
round((342 / nrow(dataset.preproc)) * 100,0)
summary(trainset)
summary(validationset)
# porcentaje de sobrevivientes en set de entrenamiento
round((230 / nrow(trainset)) * 100,0)
# porcentaje de sobrevivientes en set de validación
round((112 / nrow(validationset)) * 100,0)
partition(dataset.preproc, p = 0.3, cat_col = Survived)
library(groupdata2)
install.packages(groupdata2)
install.packages("groupdata2")
# Uncomment:
install.packages("devtools")
install.packages("devtools")
devtools::install_github("LudvigOlsen/groupdata2")
trainplot <- ggplot(trainset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
library("tidyverse")
library("data.table")
library("ggplot2")
library("GGally")
library("modelr")
dataset <- fread("titanic_complete_train.csv")
dataset
glimpse(dataset)
dataset.filtrado <- dataset %>%
select(PassengerId, Survived, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked)
dataset.filtrado
dataset.preproc <- dataset.filtrado %>%
mutate(Survived = as_factor(Survived),
Pclass = as_factor(Pclass),
Embarked = as_factor(Embarked))
dataset.preproc
glimpse(dataset.preproc)
variables <- c('Survived','Pclass','Sex','Age','Fare')
ggpairs(dataset.preproc[variables],
mapping = aes(colour= Survived)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
ggplot(dataset.preproc,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Supervivencia - Distribución de clases",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
# porcentaje de sobrevivientes
round((342 / nrow(dataset.preproc)) * 100,0)
library(groupdata2)
train_valid <- dataset.preproc %>% resample_partition(c(train=0.7,valid=0.3))
trainset <- train_valid$train %>% as_tibble()
validationset <- train_valid$valid %>% as_tibble()
trainplot <- ggplot(trainset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
validplot <- ggplot(validationset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplot,
validplot,
top = "Supervivencia - Distribución de clases",
bottom = textGrob(
gp = gpar(fontface = 3, fontsize = 9),
hjust = 1,
x = 1
)
)
install.packages("gridExtra")
library("gridExtra")
grid.arrange(
trainplot,
validplot,
top = "Supervivencia - Distribución de clases",
bottom = textGrob(
gp = gpar(fontface = 3, fontsize = 9),
hjust = 1,
x = 1
)
)
grid.arrange(
trainplot,
validplot,
top = "Supervivencia - Distribución de clases",
)
grid.arrange(
trainplot,
validplot,
top = "Supervivencia - Distribución de clases"
)
grid.arrange(
trainplot,
validplot,
nrow = 1
top = "Supervivencia - Distribución de clases"
grid.arrange(
trainplot,
validplot,
nrow = 1,
top = "Supervivencia - Distribución de clases"
)
trainplot <- ggplot(trainset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Conjunto de entrenamiento",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
validplot <- ggplot(validationset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplot,
validplot,
nrow = 1,
top = "Supervivencia - Distribución de clases"
)
validplot <- ggplot(validationset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 25)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplot,
validplot,
nrow = 1,
top = "Supervivencia - Distribución de clases"
)
validplot <- ggplot(validationset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 24)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplot,
validplot,
nrow = 1,
top = "Supervivencia - Distribución de clases"
)
# porcentaje de sobrevivientes en set de entrenamiento
round((249 / nrow(trainset)) * 100,0)
# porcentaje de sobrevivientes en set de validación
round((93 / nrow(validationset)) * 100,0)
library(caret)
trainIndex <- createDataPartition(dataset.preproc$Survived, p = .7,
list = FALSE,
times = 1)
irisTrain <- dataset.preproc[ trainIndex,]
irisTest  <- dataset.preproc[-trainIndex,]
trainset <- dataset.preproc[ trainIndex,]
validationset  <- dataset.preproc[-trainIndex,]
trainplot <- ggplot(trainset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Conjunto de entrenamiento",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
validplot <- ggplot(validationset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 24)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplot,
validplot,
nrow = 1,
top = "Supervivencia - Distribución de clases"
)
validplot <- ggplot(validationset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 22)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplot,
validplot,
nrow = 1,
top = "Supervivencia - Distribución de clases"
)
# porcentaje de sobrevivientes en set de entrenamiento
round((249 / nrow(trainset)) * 100,0)
# porcentaje de sobrevivientes en set de validación
round((93 / nrow(validationset)) * 100,0)
# porcentaje de sobrevivientes en set de entrenamiento
round((240 / nrow(trainset)) * 100,0)
# porcentaje de sobrevivientes en set de validación
round((102 / nrow(validationset)) * 100,0)
library("caret")
help("grid.arrange")
trainplotM <- ggplot(trainset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Conjunto de entrenamiento",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
validplotM <- ggplot(validationset,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 24)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplotM,
validplotM,
nrow = 1,
top = "Supervivencia - Distribución de clases"
)
grid.arrange(
trainplotM,
validplotM,
nrow = 1,
top = "Supervivencia - Distribución de clases - modelr"
)
trainsetM <- train_valid$train %>% as_tibble()
validationsetM <- train_valid$valid %>% as_tibble()
trainplotM <- ggplot(trainsetM,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Conjunto de entrenamiento",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
validplotM <- ggplot(validationsetM,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 24)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplotM,
validplotM,
nrow = 1,
top = "Supervivencia - Distribución de clases - modelr"
)
# porcentaje de sobrevivientes en set de entrenamiento
round((249 / nrow(trainset)) * 100,0)
# porcentaje de sobrevivientes en set de validación
round((93 / nrow(validationset)) * 100,0)
grid.arrange(
trainplot,
validplot,
nrow = 1,
top = "Supervivencia - Distribución de clases - caret"
)
glm.fit <- glm(Survived ~ Pclass + Sex + Age, data = trainset, family = "binomial")
summary(glm.fit)
trainset
glimpse(trainset)
rose <- data.frame(Pclass = as.factor(1),
Sex = "female",
Age = 17)
prob_rose <- predict(object = glm.fit, newdata = rose, type = "response")
rose.prob <- predict(object = glm.fit, newdata = rose, type = "response")
rose.prob
predict(object = glm.fit, newdata = rose, type = "response")
jack <- data.frame(Pclass = as.factor(3),
Sex = "male",
Age = 20)
jack.prob <- predict(object = glm.fit, newdata = jack, type = "response")
jack.prob
rose.prob
round(rose.prob,2)
round(jack.prob,2)
round(rose.prob,3)
round(jack.prob,3)
trainset
logit_formulas <- formulas(.response = ~Survived,
m1 = ~ Pclass + Sex,
m2 = ~ Pclass + Cabin + Sex + Age,
m3 = ~ Cabin + Sex,
)
trainIndex <- createDataPartition(dataset.preproc$Survived, p = .7,
list = FALSE,
times = 1)
trainsetC <- dataset.preproc[ trainIndex,]
validationsetC  <- dataset.preproc[-trainIndex,]
trainplotC <- ggplot(trainsetC,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 50)) +
labs(title = "Conjunto de entrenamiento",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
validplotC <- ggplot(validationsetC,
aes(x=Survived, fill=Survived)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position = position_fill(vjust = 22)) +
labs(title = "Conjunto de validación",
y = "Frecuencia absoluta") +
scale_x_discrete("Supervivencia", breaks = c("0","1"),
labels=c("No sobrevivientes","Sobrevivientes")) +
theme(legend.position = "none")
grid.arrange(
trainplotC,
validplotC,
nrow = 1,
top = "Supervivencia - Distribución de clases - caret"
glm.fit <- glm(Survived ~ Pclass + Sex + Age, data = trainsetC, family = "binomial")
glm.fit <- glm(Survived ~ Pclass + Sex + Age, data = trainsetC, family = "binomial")
summary(glm.fit)
models <- data_frame(logit_formulae) %>%
mutate(models = names(logit_formulae),
expression = paste(logit_formulae),
mod = map(logit_formulae, ~glm(.,family = 'binomial', data = trainsetC)))
logit_formulae <- formulas(.response = ~Survived,
m1 = ~ Pclass + Sex,
m2 = ~ Pclass + Cabin + Sex + Age,
m3 = ~ Cabin + Sex
)
models <- data_frame(logit_formulae) %>%
mutate(models = names(logit_formulae),
expression = paste(logit_formulae),
mod = map(logit_formulae, ~glm(.,family = 'binomial', data = trainsetC)))
colnames(trainsetC)
logit_formulae <- formulas(.response = ~Survived,
m1 = ~ Pclass + Sex,
m2 = ~ Pclass + Embarked + Sex + Age,
m3 = ~ Embarked + Sex
)
models <- data_frame(logit_formulae) %>%
mutate(models = names(logit_formulae),
expression = paste(logit_formulae),
mod = map(logit_formulae, ~glm(.,family = 'binomial', data = trainsetC)))
models
